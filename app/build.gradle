apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: "kotlin-kapt"
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco-android'
apply plugin: "pmd"
apply plugin: "findbugs"
apply plugin: "checkstyle"
apply plugin: 'com.adarshr.test-logger'

kapt {
    mapDiagnosticLocations = true
    correctErrorTypes = true
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"
    defaultConfig {
        applicationId "com.raywenderlich.ingredisearch"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true

        buildConfigField 'String', 'FOOD2FORK_API_KEY', keystoreProperties['FOOD2FORK_API_KEY']
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen {false}
                showStandardStreams = true
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.0'
    implementation 'com.github.bumptech.glide:glide:4.7.1'
    kapt 'com.github.bumptech.glide:compiler:4.7.1'

    testImplementation 'com.nhaarman:mockito-kotlin:1.5.0'
    testImplementation 'junit:junit:4.12'
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

}

android.applicationVariants.all { variant ->
    def variantName = variant.name.capitalize()
    def autoGenerated = ['**/R.class',
                         '**/R$*.class',
                         '**/Manifest*.*',
                         'android/**/*.*',
                         '**/BuildConfig.*',
                         '**/*$ViewBinder*.*',
                         '**/*$ViewInjector*.*',
                         '**/Lambda$*.class',
                         '**/Lambda.class',
                         '**/*Lambda.class',
                         '**/*Lambda*.class']

    // Generates Lint reports based off the source code.
    variant.assemble.dependsOn "lint$variantName"

    /**
     * Generates Lint reports based off the source code.
     */
    task("pmd$variantName", type: Pmd, dependsOn: "assemble$variantName") {
        group "Reporting"
        description "Generate ${variantName} Pmd reports."

        ignoreFailures = true
        reports {
            xml.enabled = true
            html.enabled = true
        }

        source = files(variant.javaCompiler.source)
        classpath = files(configurations.compile.files)
    }


    /**
     * Generates FindBugs reports based off the source code.
     */
    task("findbugs$variantName", type: FindBugs, dependsOn: "assemble$variantName") {
        group "Reporting"
        description "Generate ${variantName} Findbugs reports."

        ignoreFailures = true
        reports {
            xml.enabled = false
            html.enabled = true
        }

        effort = "max"
        reportLevel = "low"
        source = files(variant.javaCompiler.source)
        classpath = files(configurations.compile.files)
        classes = fileTree(dir: variant.javaCompiler.destinationDir, excludes: autoGenerated)
    }

    /**
     * Generates Checkstyle reports based off the source code.
     */
    task("checkstyle$variantName", type: Checkstyle, dependsOn: "assemble$variantName") {
        group "Reporting"
        description "Generate ${variantName} Checkstyle reports."

        ignoreFailures = true
        reports.html.enabled = true

        configFile = rootProject.file("./.buildscript/checkstyle-hard.xml")
        source = files(android.sourceSets.main.java.srcDirs)
        classpath = files(configurations.compile.files)
    }
}